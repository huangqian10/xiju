<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">
	<context:annotation-config />

	<context:property-placeholder location="classpath:db.properties"
		ignore-unresolvable="true" />
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl"
			value="jdbc:mysql://${db.host}:${db.port}/${db.dbname}${db.desc}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.passwd}" />

		<!-- 配置 -->
		  <!--连接池中保留的最大连接数。默认值: 15 -->   
          <property name="maxPoolSize" value="150"/>
          <!-- 连接池中保留的最小连接数，默认为：3-->  
          <property name="minPoolSize" value="10"/>
          <!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->  
          <property name="initialPoolSize" value="10"/>  
  
          <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->   
          <property name="maxIdleTime" value="60"></property>  
            
          <!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->   
          <property name="checkoutTimeout" value="3000"/>  
            
          <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->   
          <property name="acquireIncrement" value="2"/>  
  
         <!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->   
          <property name="acquireRetryAttempts" value="0"/>  
  
          <!--重新尝试的时间间隔，默认为：1000毫秒-->   
          <property name="acquireRetryDelay" value="1000" />  
  
          <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->   
          <property name="autoCommitOnClose" value="false"></property>  
  
          <!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null -->   
          <property name="automaticTestTable" value="Test"></property>  
  
          <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false-->   
          <property name="breakAfterAcquireFailure" value="false"></property>  
  
          <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->   
          <property name="idleConnectionTestPeriod" value="60"></property>  
          <!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->   
          <property name="maxStatements" value="100"></property>  
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- 方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- session -->
				<prop key="hibernate.current_session_context_class">
					org.springframework.orm.hibernate4.SpringSessionContext
				</prop>
				<!-- 后台输出SQL语句 -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 后台输出SQL语句时格式化 -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<!-- 数据库表的操作 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- INFO: HHH000424: Disabling contextual LOB creation as createClob() 
					method threw error : -->
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>

				<!-- 二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!-- 查询缓存 -->
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<!-- 缓存工厂 -->
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
				<!-- 所需的类 -->
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
			</props>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>com.xiyoukeji.xiju.model.ReceiptAddress</value>
				<value>com.xiyoukeji.xiju.model.User</value>
				<value>com.xiyoukeji.xiju.model.Activity</value>
				<value>com.xiyoukeji.xiju.model.FaxianActivity</value>
				<value>com.xiyoukeji.xiju.model.Goods</value>
				<value>com.xiyoukeji.xiju.model.ChuanyiActivity</value>
				<value>com.xiyoukeji.xiju.model.Comment</value>
				<value>com.xiyoukeji.xiju.model.Cart</value>
				<value>com.xiyoukeji.xiju.model.Collect</value>
				<value>com.xiyoukeji.xiju.model.Color</value>
				<value>com.xiyoukeji.xiju.model.Message</value>
				<value>com.xiyoukeji.xiju.model.Receipt</value>
				<value>com.xiyoukeji.xiju.model.Voucher</value>
				<value>com.xiyoukeji.xiju.model.Content</value>
				<value>com.xiyoukeji.xiju.model.GoodsColorStyle</value>
				<value>com.xiyoukeji.xiju.model.GoodsParams</value>
				<value>com.xiyoukeji.xiju.model.Params</value>
				<value>com.xiyoukeji.xiju.model.Style</value>
				<value>com.xiyoukeji.xiju.model.Scene</value>
				<value>com.xiyoukeji.xiju.model.Type</value>
				<value>com.xiyoukeji.xiju.model.GoodsScene</value>
				<value>com.xiyoukeji.xiju.model.Feedback</value>
				<value>com.xiyoukeji.xiju.model.VoucherCode</value>
				<value>com.xiyoukeji.xiju.model.AdminUser</value>
				<value>com.xiyoukeji.xiju.model.PowerInfo</value>
				<value>com.xiyoukeji.xiju.model.UrlInfo</value>
				<value>com.xiyoukeji.xiju.model.Spread</value>
				<value>com.xiyoukeji.xiju.model.Message</value>
				<value>com.xiyoukeji.xiju.model.UserMsg</value>
				<value>com.xiyoukeji.xiju.model.ClientInfo</value>
				<value>com.xiyoukeji.xiju.model.Stylist</value>
				<value>com.xiyoukeji.xiju.model.PromotionCode</value>
				<value>com.xiyoukeji.xiju.model.WithdrawMoney</value>
				<value>com.xiyoukeji.xiju.model.WithdrawalProportion</value>
				<value>com.xiyoukeji.xiju.model.BankCard</value>
			</list>
		</property>
	</bean>

	<!-- 配置一个事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 通过注解来管理事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<context:annotation-config />
	<context:component-scan base-package="com.xiyoukeji.*.*"
		annotation-config="true" />
	<aop:aspectj-autoproxy />
	<bean id="hibernateDao" class="com.xiyoukeji.xiju.core.dao.BaseHibernateDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
</beans>